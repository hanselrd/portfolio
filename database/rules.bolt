/***********************************************************
  Users

************************************************************/
path /users {
  read() { isSignedIn() }

  path /{userid} is User {
    update() { isCurrentUser(userid) || isAdmin() }
  }
}

type User {
  name: NameString;
  photoURL: String | Null;
  age: Number | Null;
  online: Boolean | Null;
}

/***********************************************************
  Chat

************************************************************/
path /chat {
  read() { isSignedIn() }
  write() { isAdmin() }

  path /status is ChatStatus;

  path /announcement is ChatAnnouncement;

  path /messages/{messageid} is ChatMessage {
    create() { isSignedIn() && isChatEnabled() && !isBannedFromChat() }
    delete() { isMod() }
  }

  path /banned/{userid} is ChatBanned {
    // cannot ban yourself, nice try
    write() { !isCurrentUser(userid) && isMod() }
  }
}

type ChatStatus {
  enabled: Boolean;
}

type ChatAnnouncement {
  user: UserID;
  text: ChatAnnouncementString;
  created: InitialTimestamp;
}

type ChatAnnouncementString extends String {
  validate() { this.length > 0 && this.length <= 512 }
}

type ChatMessage {
  user: UserID;
  text: ChatMessageString;
  created: InitialTimestamp;
}

type ChatMessageString extends String {
  validate() { this.length > 0 && this.length <= 256 }
}

type ChatBanned {
  staff: UserID;
  reason: String;
}

function isChatEnabled() { prior(root).chat.status.enabled }
function isBannedFromChat() { prior(root).chat.banned[auth.uid] != null }

/***********************************************************
  Settings

************************************************************/
path /settings/{userid} is Settings {
  read() { isCurrentUser(userid) || isAdmin() }
  update() { isCurrentUser(userid) || isOwner() }
}

type Settings {
  showEmail: Boolean | Null;
}

/***********************************************************
  Metadata

************************************************************/
path /metadata {
  write() { isOwner() }

  path /users/{userid} is MetadataUser {
    read() { isSignedIn() }
  }
}

type MetadataUser {
  email: String | Null;
  provider: String;
  role: Number | Null;
  created: InitialTimestamp;
}

function hasRole(role) { isSignedIn() && prior(root).metadata.users[auth.uid].role >= role }
function isOwner() { hasRole(30) }
function isAdmin() { hasRole(20) }
function isMod() { hasRole(10) }

/***********************************************************
  Helper Types

************************************************************/
type UserID extends String {
  validate() { prior(root).users[this] != null }
}

type NameString extends String {
  validate() { this.length >= 3 && this.length <= 20 }
}

type CurrentTimestamp extends Number {
  validate() { this == now }
}

type InitialTimestamp extends Number {
  validate() { initial(this, now) }
}

type Color extends String {
  validate() { this.test(/^red|orange|yellow|olive|green|teal|blue|violet|purple|pink|brown|grey|black$/) }
}

// type Pair<T, U> {
//   first: T;
//   second: U;
// }

/***********************************************************
  Helper Functions

************************************************************/
function isSignedIn() { auth != null }
function isCurrentUser(uid) { isSignedIn() && auth.uid == uid }
function initial(value, init) { value == (prior(value) == null ? init : prior(value)) }
