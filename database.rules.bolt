type UserID extends String {
  validate() { prior(root).users[this] != null }
}

type UserDisplayName extends String {
  validate() { this.length >= 3 && this.length <= 20 }
}

type ChatMessageText extends String {
  validate() { this.length > 0 && this.length <= 256 }
}

type User {
  displayName: UserDisplayName; // on first write, permission error
  photoURL: String | Null;
  online: Boolean | Null;
}

type Permission {
  level: Number;
}

type ChatMessage {
  user: UserID;
  text: ChatMessageText;
  createdAt: Number;
}

type Chat {
  announcement: String | Null;
  messages: ChatMessage[];
}

type Settings {
  showEmail: Boolean;
}

path /users/{uid} is User {
  read() { isSignedIn() }
  write() { isCurrentUser(uid) || isAdmin() }
}

path /permissions/{uid} is Permission {
  read() { isSignedIn() }
}

path /chat is Chat {
  read() { isSignedIn() }
  write() { isMod() }
}

// Public can see it IFF user allows it, but user cannot write
path /protected/{uid} {
  read() { isCurrentUser(uid) || isAdmin() }

  path /email is String {
    read() { isSignedIn() && prior(root).private[uid].owned.settings.showEmail == true }
  }

  path /provider is String {
    read() { isSignedIn() }
  }

  path /createdAt is String {
    read() { isSignedIn() }
  }
}

// User only / personal data not for public
path /private/{uid} {
  read() { isAdmin() }
  write() { isAdmin() }

  path /readable {
    read() { isCurrentUser(uid) }
  }

  path /writeable {
    write() { isCurrentUser(uid) }

    path /chat/message is ChatMessageText;
  }

  path /owned {
    read() { isCurrentUser(uid) }
    write() { isCurrentUser(uid) }

    path /settings is Settings;
  }
}

function isSignedIn() { auth != null }

function isCurrentUser(uid) { isSignedIn() && auth.uid == uid }

function isRole(role) { isSignedIn() && prior(root).permissions[auth.uid].level >= role }

function isAdmin() { isRole(20) }

function isMod() { isRole(10) }
